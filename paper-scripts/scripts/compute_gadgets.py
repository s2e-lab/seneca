"""
This script aims to run the gadget-inspector
MODE 1:
- parses the CSV file from the feature extraction step and executes the gadget-inspector on the most popular maven APIs.
- parses the CSV file from the feature extraction step and executes the gadget-inspector on the dependencies of the most popular maven APIs.
MODE 2:
- walks through the dataset folder and executes the gadget-inspector on each JAR file under study (With the dependencies in the class path).

Usage:
    python compute_gadgets.py <mode> <input_file> <output_file>

@author: Joanna C S Santos
"""

import csv
import glob
import os
import shutil
import subprocess
from enum import Enum

from tqdm import tqdm

AnalysisMode = Enum('AnalysisModes', ['POPULAR_APIS_ONLY', 'DEPENDENCIES_ONLY', 'ALL'])


def is_empty(file_path):
    """
    Check whether a file is empty.
    @param file_path:  path to the file to be checked
    @return: true if the file is empty, false otherwise.
    """
    return os.path.exists(file_path) and os.path.getsize(file_path) == 0


def process_jar(jar_file: str) -> str:
    """
    Run gadget-inspector on a JAR file
    @param jar_file: path to the JAR file to be analyzed
    @return: the full path where the gadget-chains.txt file was saved (and renamed) or an error message if the
    gadget-inspector failed to analyze the JAR file.
    """
    command = ['java', '-Xmx8G', '-jar', './libs/gadget-inspector-all.jar', jar_file]
    target_path = None
    try:
        # run the gadget-inspector
        subprocess.run(command, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
        # tool found gadget chains
        if not is_empty("gadget-chains.txt"):
            # After command execution, rename and move gadget-chains.txt to the target folder
            target_folder = os.path.dirname(jar_file)
            base_name = os.path.basename(jar_file)  # Get filename without path
            new_name = os.path.splitext(base_name)[0] + '.txt'  # Replace extension with .txt
            target_path = os.path.join(target_folder, new_name)
            shutil.move("gadget-chains.txt", target_path)
        # Delete all *.dat files in the current folder
        for dat_file in glob.glob("*.dat"): os.remove(dat_file)
        # Delete any leftover gadget-chains.txt file
        if os.path.exists("gadget-chains.txt"): os.remove("gadget-chains.txt")
    except Exception as e:
        print(f"Error analyzing {jar_file}: {e}")

    return target_path


def is_dependency(file_path):
    """
    Check whether a file is a dependency.
    @param file_path:  path to the file to be checked
    @return: true if the file is a dependency, false otherwise.
    """
    return "target/dependency/" in file_path


def parse_csv_and_execute(csv_file_path: str, out_file: object, mode: AnalysisMode) -> None:
    """
    Parse the CSV file and execute gadget-inspector on each JAR file.
    @param csv_file_path: where the input CSV file is.
    @return: a list of found chains (ie., paths to the gadget-chains.txt files generated by gadget-inspector)
    """
    file_set = set()
    with open(csv_file_path, 'r') as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter='\t')
        for row in csv_reader:
            if row['FeatureName'] == 'java.io.ObjectInputStream#callbacks':
                file_path = row['File']
                if (mode == AnalysisMode.POPULAR_APIS_ONLY and not is_dependency(file_path)) or \
                        (mode == AnalysisMode.DEPENDENCIES_ONLY and is_dependency(file_path)) or \
                        (mode == AnalysisMode.ALL):
                    file_set.add(row['File'])

    for file in tqdm(file_set, desc="Processing files", unit="file"):
        found_chain = process_jar(file)
        if found_chain and os.path.exists(found_chain):
            out_file.write(found_chain + '\t' + str(os.path.getsize(found_chain)) + '\n')


def save_results(csv_file: str, gadget_chains: list) -> None:
    """
    Save the list of non-empty gadget chains to the specified output file
    @param csv_file: where to save the results
    @param gadget_chains: list of gadget chain text file paths
    """

    with open(csv_file, 'w') as out_file:
        out_file.write("Gadget Chains Text File\tSize\n")
        for chain in gadget_chains:
            out_file.write(chain + '\t' + str(os.path.getsize(chain) if os.path.exists(chain) else -1) + '\n')


def run_maven_dataset():
    """
    Run gadget-inspector on each JAR file in the Maven dataset.
    """
    with open("../dataset/maven/found_chains_on_dependencies.csv", 'w') as out_file:
        out_file.write("Gadget Chains Text File\tSize\n")
        parse_csv_and_execute("../dataset/maven/analysis-results-details.csv", out_file, AnalysisMode.DEPENDENCIES_ONLY)

    with open("../dataset/maven/found_chains.csv", 'w') as out_file:
        out_file.write("Gadget Chains Text File\tSize\n")
        parse_csv_and_execute("../dataset/maven/analysis-results-details.csv", out_file, AnalysisMode.POPULAR_APIS_ONLY)


def run_xcorpus_dataset():
    """
    Run gadget-inspector on each JAR file in the XCorpus dataset.
    """
    # recursively iterate over ../dataset/testcases
    file_set = set()

    for root, dirs, files in os.walk("../dataset/testcases"):
        for file in files:
            if file.endswith("-jar-with-dependencies.jar"):
                file_set.add(os.path.join(root, file))

    with open("../results/rq4/found_chains_gadget_inspector.csv", 'w') as out_file:
        out_file.write("Gadget Chains Text File\tSize\n")
        for file in tqdm(file_set, desc="Processing files", unit="file"):
            found_chain = process_jar(file)
            if found_chain and os.path.exists(found_chain):
                out_file.write(found_chain + '\t' + str(os.path.getsize(found_chain)) + '\n')
                # copy gadget file to rq4 folder
                suffix = os.path.basename(file).replace('-jar-with-dependencies.jar', '')
                shutil.copy(found_chain, f"../results/rq4/gadget-inspector_{suffix}.txt")


if __name__ == "__main__":
    # run_maven_dataset()
    run_xcorpus_dataset()
