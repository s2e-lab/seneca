#!/bin/bash


# Checks the number of parameters
[[ $# != 3 ]] && echo "Usage: <ProjectName> <TestCase-Folder> <TestCase-JarFile.jar>" && exit


# Checks whether the JAVA_HOME is set
[[ -z "${JAVA_HOME}" ]] && echo "JAVA_HOME is not set" && exit 


JAVA_HOME=/Users/joanna/Library/Java/JavaVirtualMachines/liberica-1.8.0_333
# Hardcoded paths to JRE environment
JRE_LIB="${JAVA_HOME}/jre/lib"
JAVA_LIB="${JAVA_HOME}/lib"


# Compute paths to all dependencies
JRE_LIB_JARS=
for i in `ls ${JRE_LIB}/*.jar`
do
  JRE_LIB_JARS=${JRE_LIB_JARS}:${i}
done

JRE_EXT_LIB_JARS=
for i in `ls ${JRE_LIB}/ext/*.jar`
do
  JRE_EXT_LIB_JARS=${JRE_EXT_LIB_JARS}:${i}
done

JAVA_LIB_JARS=
for i in `ls ${JAVA_LIB}/*.jar`
do
  JAVA_LIB_JARS=${JAVA_LIB_JARS}:${i}
done


# Paths to the agent and classpath
RUNTIME_AGENT_PATH=libs/libdyncg.so
XBOOT_CP="${JRE_LIB_JARS:1}${JRE_EXT_LIB_JARS}${JAVA_LIB_JARS}"

JAVA_AGENT=${RUNTIME_AGENT_PATH}



# Parses the parameters
project_name=$1
tc_folder=$2
jar_path=$3
jar_name="${jar_path##*/}"
jar_name=${jar_name%.*}
output_folder="../runtime-cgs/${project_name}"




echo "Creating output folder ${output_folder}"
mkdir -p ${output_folder}

echo "Removing old results from ${output_folder}/*.txt"
rm -f ${output_folder}/*.txt


# Computes runtime dependencies for each JAR file
DEPENDENCIES=
for i in `ls ${tc_folder}/lib/default-lib/*.jar`
do
  DEPENDENCIES=${DEPENDENCIES}:${i}
done
for i in `ls ${tc_folder}/lib/*.jar`
do
  DEPENDENCIES=${DEPENDENCIES}:${i}
done


# Computes the runtime stack traces for each test case
error_files=()
printf "Analyzing Jar File: ${jar_path}\n"
for test_case_class in `grep -l -r "main(" $tc_folder` ; do
    class_name="${test_case_class##*/}"
    main_class="${class_name%.*}"
    if  [[ $main_class == TC* ]] ;
    then    
        echo "Creating dynamic call graph with main class: ${class_name}"
        output_file=${output_folder}/${main_class}-jvmti-output.txt
        error_file=${output_folder}/${main_class}-jvmti-stderr.txt
        # executes JVM agent
        java -agentpath:${JAVA_AGENT} \
            -Djava.ext.dirs=${JAVA_LIB}/ext \
            -Xbootclasspath:${XBOOT_CP}:${DEPENDENCIES}:${jar_path} \
            -classpath ${DEPENDENCIES}:${jar_path} testcases.${main_class} > $output_file 2> $error_file
        
        # moves the trace.txt generated by the agent to the right location
        mv trace.txt ${output_file}

        # checks any runtime errors
        if [[ -s $error_file ]] 
        then
          error_files+=("${error_file}")
        fi
    fi
done


# Reports any runtime errors
echo "Finished runtime analysis!"

for error_file in "${error_files[@]}"
do
  echo "File ${error_file} is not empty! Runtime error might have occurred with test case ${class_name}"
done

#  Cleanups
echo "Cleaning up any *.ser file left behind"
rm -f *.ser


########################################################################################################
# Example on how to run it
########################################################################################################
# ./computeDynamicCGs.sh ../dataset/testcases/batik-1.7 ../dataset/build/batik-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/castor-1.3.1 ../dataset/build/castor-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/commons-collections-3.2.1 ../dataset/build/commons-collections-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/htmlunit-2.8 ../dataset/build/htmlunit-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/james-2.2.0 ../dataset/build/james-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/jgraph-5.13.0.0 ../dataset/build/jgraph-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/jpf-1.5.1 ../dataset/build/jpf-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/log4j-1.2.16 ../dataset/build/log4j-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/megamek-0.35.18 ../dataset/build/megamek-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/openjms-0.7.7-beta-1 ../dataset/build/openjms-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/pooka-3.0-080505/ ../dataset/build/pooka-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/tomcat-7.0.2 ../dataset/build/tomcat-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/weka-3.7.9 ../dataset/build/weka-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/xalan-2.7.1 ../dataset/build/xalan-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/xerces-2.10.0 ../dataset/build/xerces-testcases.jar
# ./computeDynamicCGs.sh ../dataset/testcases/cats/ser1 ../dataset/build/Ser1-JRE1.8.jar
########################################################################################################

